name: Build Pyodide Arbor module

on:
  workflow_dispatch:
  schedule:
    - cron: '0 9 * * 1' # Every monday 9:00
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - uses: actions/checkout@v3
      with:
        submodules: true
        path: arbor_src
        repository: 'arbor-sim/arbor'
    - name: get-xbuildenv
      # The xbuildenv allows us to build Pyodide packages out-of-tree
      # i.e. without comping Pyodide from source. All important build
      # variables are stored in the Makefile.envs variable, and we also
      # use exported CPython headers
      run: |
        PYODIDE_VERSION=$(cat PYODIDE_VERSION)
        PYODIDE_RELEASE_URL="https://github.com/pyodide/pyodide/releases/download"
        XBUILDENV_BASENAME=xbuildenv-${PYODIDE_VERSION}.tar.bz2
        wget -nc "${PYODIDE_RELEASE_URL}/${PYODIDE_VERSION}/${XBUILDENV_BASENAME}"
        tar -xvf ${XBUILDENV_BASENAME}
        rm ${XBUILDENV_BASENAME}
    - name: read-makefile
      # Here, we read out all Pyodide xbuildend environment variables.
      # This contains the entire environment and some extra stuff in
      # K=V form (like a normal `env` invocation). We filter out
      # all PYthon related variables and put these in the worker environment
      run: |
        make -f xbuildenv/pyodide-root/Makefile.envs .output_vars | grep 'PY' | tee -a $GITHUB_ENV
    - name: get-emsdk
      # When we compile arbor, we *must* match the emscripten version to
      # the one used when building Pyodide, as (among other), this determines
      # the libc API. A wrong emscripten version leads to (or at least when
      # I did that) type errors. The emsdk allows us to select a specific
      # emscripten version
      run: |
        wget https://github.com/emscripten-core/emsdk/archive/refs/heads/main.zip
        unzip main.zip
        rm main.zip
    - name: setup-emsdk
      # Here, we read out the emscripten version of Pyodide and install
      # that version using emsdk. To actually use these, we need to tell
      # cmake where the toolchain file is or from a shell script
      # you need to source the activation script. This needs to be done
      # for each gh worker separately
      run: |
        ./emsdk-main/emsdk install ${{env.PYODIDE_EMSCRIPTEN_VERSION}}
        ./emsdk-main/emsdk activate ${{env.PYODIDE_EMSCRIPTEN_VERSION}}
    - name: build-modcc-host
      # Our first build builds just arbor modcc in the native
      # binary format. By default an arbor build would compile
      # modcc, then call modcc to convert builtin nmodl files
      # and then compile those using the toolchain.
      # Because out goal is to (cross-)compile arbor with the
      # emscripten toolchain, we would generate an modcc as
      # js/wasm file which doesn't fit in the build process.
      # To be able to use modcc without much trouble, we
      # must compile it as a native binary
      run: |
        mkdir -p arbor_src/build_modcc_host
        cd arbor_src/build_modcc_host
        cmake .. -DARB_USE_BUNDLED_LIBS=ON
        make modcc -j 2
    - name: build-libarbor-emscripten
      # Here we instruct CMake/make to build the arbor static
      # libraries (libarbor*.a) using the emscripten toolchain.
      # As such, we must point to towards our previously build
      # modcc binary.
      run: |
        ABS_TOOLCHAIN=$(realpath emsdk-main/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake)
        ABS_MODCC=$(realpath arbor_src/build_modcc_host/bin/modcc)
        sed -i.bak -E \
            '/only been tested|nonexistent_file|unbalanced brace/d' \
            arbor_src/ext/random123/include/Random123/features/gccfeatures.h
        mkdir -p arbor_src/build_arborlib_em
        cd arbor_src/build_arborlib_em
        cmake .. \
            --toolchain "${ABS_TOOLCHAIN}" \
            -DCMAKE_INSTALL_PREFIX=$(realpath prefix) \
            -DARB_USE_BUNDLED_LIBS=ON \
            -DARB_MODCC="${ABS_MODCC}" \
            -DARB_ARCH=generic
        make -j 2
        make install
    - name: build-arbor-python-so-emscripten
      # Finally, we can use emscripten to build the python module .so
      # file using the pybind11 binding files from the arbor source
      # code and the previously generated libarbor*.a files.
      # Ideally, this would happen automatically in the previous step,
      # but due to the large amount of extra command line flags
      # and targeting a non-standard platorm (eg no site-packages dir),
      # we call emscripten by hand. This will take a while.
      # Importantly, we must point the compiler to the cpython header
      # files that Pyodide uses. Then there are some flags that are
      # required for any Pyodide python module. Finally we set the
      # arbor config variables (PREFIX,BINARY,... etc..) to /dev/null.
      # These are not actually used unless one calls arbor-build-catalogue,
      # which is not possible in the browser anyway.
      run: |
        ABS_XBUILDENV_INCLUDE=$(realpath xbuildenv/pyodide-root${{ env.CPYTHONINSTALL }}/include/python${{ env.PYMAJOR }}.${{ env.PYMINOR }})
        ABS_EM_ARBOR=$(realpath arbor_src/build_arborlib_em/prefix)
        PY_VERSION_FLAT=${{ env.PYMAJOR }}${{ env.PYMINOR }}
        ARBOR_PYLIB_OUTPUT=arbor/_arbor.cpython-${PY_VERSION_FLAT}-wasm32-emscripten.so
        ABS_ARBOR_PYLIB_OUTPUT=$(pwd)/$ARBOR_PYLIB_OUTPUT
        source emsdk-main/emsdk_env.sh
        mkdir -p arbor arbor.dist-info
        mkdir -p arbor_src/build_python_lib_em
        cd arbor_src/build_python_lib_em
        time em++ \
            ../python/*.cpp \
            -I ../ext/pybind11/include/ \
            -I ../ext/json/include/ \
            -I "${ABS_XBUILDENV_INCLUDE}" \
            -I "${ABS_EM_ARBOR}/include" \
            -std=c++20 \
            "${ABS_EM_ARBOR}/lib/libarbor.a" \
            "${ABS_EM_ARBOR}/lib/libarborio.a" \
            "${ABS_EM_ARBOR}/lib/libarborenv.a" \
            -o "${ABS_ARBOR_PYLIB_OUTPUT}" \
            -shared -fPIC \
            -s ALLOW_MEMORY_GROWTH=1 \
            -s FORCE_FILESYSTEM=1 \
            -s LINKABLE=1 \
            -s USE_SDL=0 \
            -s SIDE_MODULE=1 \
            -s MODULARIZE=1 \
            -s WASM_BIGINT=1 \
            '-DARB_PREFIX="/dev/null"' \
            '-DARB_BINARY="/dev/null"' \
            '-DARB_LIB="/dev/null"' \
            '-DARB_CXX_COMPILER="/dev/null"' \
            '-DARB_DATA="/dev/null"' \
            '-DARB_PYTHON_LIB_PATH="/dev/null"' \
            -flto=thin \
            -g0 \
            -O2
    - name: build-dynamic-catalogues
      # now build the dynamic (.so) catalogues
      # could also happen separately, but
      # it's nice that we already have the build environemt
      # around, and this makes sure the .so and
      # `import arbor` match in software versions
      run: |
        ABS_EM_ARBOR=$(realpath arbor_src/build_arborlib_em/prefix)
        ABS_MODCC=$(realpath arbor_src/build_modcc_host/bin/modcc)
        source emsdk-main/emsdk_env.sh
        # EDIT NEXT LINE WHEN INTRODUCING NEW CATALOGUES!
        cd catalogue
        for CAT in io l5pc
        do
          mkdir -p "${CAT}.build/generated"
          "${ABS_MODCC}" -N arb -c "${CAT}" -o "${CAT}.build/generated" -t cpu "${CAT}"/*.mod
          em++ "${CAT}.build/generated"/*.cpp \
              -I "${ABS_EM_ARBOR}/include" \
              -std=c++20 \
              -o "${CAT}-catalogue.so" \
              -shared -fPIC \
              -s ALLOW_MEMORY_GROWTH=1 \
              -s LINKABLE=1 \
              -s USE_SDL=0 \
              -s SIDE_MODULE=1 \
              -s MODULARIZE=1 \
              -s WASM_BIGINT=1 \
              -DSTANDALONE=1 \
              -g0 \
              -O2
        done
    - name: build-python-wheel-emscripten
      # The last step wraps up everything into a wheel file
      run: |
        cp -v arbor_src/VERSION arbor
        cp -v dist-files/__init__.py arbor/__init__.py
        cp -v dist-files/WHEEL arbor/WHEEL
        cp -v catalogue/*-catalogue.so arbor/
        sed "s/ARBOR_VERSION/$(cat arbor_src/VERSION)/" \
          dist-files/METADATA_TEMPLATE > arbor.dist-info/METADATA
        WHEEL_FILE="arbor-$(cat arbor_src/VERSION)-py${{ env.PYMAJOR }}-none-any.whl"
        echo "WHEEL_FILE=$WHEEL_FILE" | tee -a $GITHUB_ENV
        zip -r "${WHEEL_FILE}" arbor arbor.dist-info
    - name: save-python-wheel
      uses: actions/upload-artifact@v3
      with:
        name: Arbor Emscripten Wheel
        path: ${{ env.WHEEL_FILE }}
    - name: build-static
      run: |
        # 'install' wheel file
        echo ${{env.WHEEL_FILE}} > static/ARBOR_WHEEL_NAME
        cp -v ${{ env.WHEEL_FILE }} static
        # get latest pyodide distribution
        PYODIDE_VERSION=$(cat PYODIDE_VERSION)
        PYODIDE_RELEASE_URL="https://github.com/pyodide/pyodide/releases/download"
        PYODIDE_BASENAME=pyodide-${PYODIDE_VERSION}.tar.bz2
        wget -nc "${PYODIDE_RELEASE_URL}/${PYODIDE_VERSION}/${PYODIDE_BASENAME}"
        tar -xvf ${PYODIDE_BASENAME}
        mv pyodide static
    - name: build-static-artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: static
        retention-days: 10

  deploy-static-ghpages:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
